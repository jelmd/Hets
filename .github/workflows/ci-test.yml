# NOTE: Ressourcs for public repos: see Account/Org Settings | Billing & plans:
#	- 2000 min/month (== 16 US$)
#		- linux devisor: 1
#		- macosx devisor: 10 => 200 min/month
#		- windows devisor: 2 => 1000 min/month
#	- 10 GB cache storage
#		- delete on demand: FIFO
#	- package/action storage: 500 MB
#	- total concurent jobs:
#		- linux: 20
#		- macos: 5
#	- max job execution time: 6 h
#	- max workflow execution time: 72 h
#	- API requests: 1000 req/h
#	- matrix generated jobs/workflow: max. 256
#	- max. workflows: 500 every 10 s

# Build hets and run related tests for CI
name: CI-Tests

env:
  SKIP_TEST: 0
  SKIP_HADDOCK: 0
  NO_DOCS: 1
  # Dir cannot be directly in /tmp or /var/tmp because Microsoft does not
  # understand dir mode 01777 and errors out with dumb messages. /dev/shm/
  # does not work for stack - not enough space. /tmp as well as /var/tmp are on
  # /dev/sd*.
  STACK_ROOT: /var/tmp/hets/stack
  GAH: utils/gha-helper.sh
  MISSING_PKGS: 'libpango1.0-dev libgtk2.0-dev'
  HETS_ARC: /var/tmp/hets/hets.tzst
  PREFIX: /var/tmp/hets/hets-install
  HETS_LIB: /var/tmp/hets/hets-install/lib/hets/hets-lib

# When to trigger this workflow
on:
  # on push or pull requests for the given branches
  push:
    branches:
      - gha
  pull_request:
    branches:
      - gha

# Run this workflow for the latest commit in a branch, only. I.e. if there is
# any instance for an older commit still running, stop it and kill its jobs.
concurrency:
  group: pr-build-and-test-${{ github.ref_head }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run seq. or in parallel
# but always in a separate, fresh container. So each job needs to fetch the work
# from previous jobs and checkout the repo again, if needed.
#
# Re-usable workflows? Forget this non-sense. Write a script and put it in there
# than you have re-usable stuff which can be run on any step, several times ...
jobs:
  job_1:
    name: Stack
    runs-on: ubuntu-18.04
    # If the job takes longer than 30 min, something is going wrong. E.g. stack
    # sometimes goes in an endless loop. We prefer to kill instead of wasting
    # valueable credits (2000 min/month).
    timeout-minutes: 30
    steps:
      # Info about the running environment makes troubleshooting easier. < 1s
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          mkdir -p ${{ env.STACK_ROOT }}
          printf "$GITHUB_CONTEXT\n"
          df -h
          mount

      # Actually we only need stack.yml to calculate the hash. But the checkout
      # takes ~ 5s, only => not worth to optimize/add complexity.
      - name: Checkout
        uses: actions/checkout@v2

      # If stack.yaml has not been changed, we can try to use a cached copy,
      # which saves ~15..20 min. On hit (~ 495 MiB) it takes ~ 25s
      # NOTE: There is no way to remove or update a cached file. So one needs
      # to modify stack.yaml to create a new cache entry =8-( .
      - name: Fetch stack cache
        id: stack_cache
        uses: actions/cache@v2
        with:
          path: ${{ env.STACK_ROOT }}
          key: stack-${{ runner.os }}-${{ hashFiles('stack.yaml') }}

      # Add missing packages. Since it is not a minimal server image, almost
      # everything is already installed. But this makes update time longer: 13s
      - name: Update packages
        if: steps.stack_cache.outputs.cache-hit != 'true'
        run: |
          echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get install ksh93 || sudo apt-get install ksh
          sudo apt-get install ${{ env.MISSING_PKGS }}

      - name: Build stack
        if: steps.stack_cache.outputs.cache-hit != 'true'
        run: |
          ${{ env.GAH }} -c showEnv
          # bogus stack
          unsetenv POSIXLY_CORRECT
          cp -pL `which ksh93` ${{ env.STACK_ROOT }}/
          make stack && rm -rf ${{ env.STACK_ROOT }}/programs/x86_64-linux/*/share/doc || mv ${{ env.STACK_ROOT }} ${{ env.STACK_ROOT }}.fail
          rm -f ${{ env.STACK_ROOT }}/programs/x86_64-linux/*.tar.xz
          ls -al ${{ github.workspace }}
          ls -al ${{ env.STACK_ROOT }} && du -sh ${{ env.STACK_ROOT }}
          stack exec -- ghc -V

  # Unfortunately there are no parameter driven jobs or job templates. Should
  # we use GHA helper script instead?
  job_2a:
    name: Hets Desktop
    runs-on: ubuntu-18.04
    needs: job_1
    steps:
      # Add missing packages, but leave man as is (saves ~ 15s).
      - name: Update packages
        run: |
          echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get install ${{ env.MISSING_PKGS }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch stack cache
        uses: actions/cache@v2
        with:
          path: ${{ env.STACK_ROOT }}
          key: stack-${{ runner.os }}-${{ hashFiles('stack.yaml') }}

      - name: Environment
        run: |
          sudo cp -p ${{ env.STACK_ROOT }}/ksh93 /bin/ksh93
          ${{ env.GAH }} -c showEnv

      - name: Build hets
        run: |
          # Update stack info
          make stack
          make hets.bin
          # 250+ MB for .git is by far too much ...
          /bin/tar -H posix -I zstd --exclude=.git --exclude=OcamlTools --exclude=lib --exclude=hets-mmt-standalone.jar --exclude=Termination -cplf ${{ env.HETS_ARC }} .
          ln -s hets.bin hets
          cp -pL /bin/ksh93 .
          # gives us a proper exit code, too.
          ./hets -V

      # Actually we need it for tests, only. So 1h retention would be enough.
      # ~ 206 MiB which saves us ~ 25 min.
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: hets-desktop
          path: ${{ env.HETS_ARC }}
          retention-days: 1

  job_2b:
    name: Hets Server
    runs-on: ubuntu-18.04
    needs: job_1
    steps:
      # Add missing packages, but leave man as is (saves ~ 15s).
      - name: Update packages
        run: |
          echo 'man-db man-db/auto-update boolean false' | sudo debconf-set-selections
          sudo rm -f /var/lib/man-db/auto-update
          sudo apt-get install ${{ env.MISSING_PKGS }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch stack cache
        uses: actions/cache@v2
        with:
          path: ${{ env.STACK_ROOT }}
          key: stack-${{ runner.os }}-${{ hashFiles('stack.yaml') }}

      - name: Environment
        run: |
          sudo cp -p ${{ env.STACK_ROOT }}/ksh93 /bin/ksh93
          ${{ env.GAH }} -c showEnv

      - name: Build hets
        run: |
          # Update stack - it blindly links in all extra-deps, no matter, what
          # flags.Hets say (or what is really needed) =8-(
          sed -i -e '/gtk-/ d' -e '/gtkglade/ s/true/false/' stack.yaml
          make stack
          make hets_server.bin || true
          cp -pL /bin/ksh93 .
          # 258+ MiB for .git is by far too much ...
          /bin/tar -H posix -I zstd --exclude=.git --exclude=OcamlTools --exclude=lib --exclude=hets-mmt-standalone.jar --exclude=Termination -cplf ${{ env.HETS_ARC }} .
          ln -s hets_server.bin hets
          # gives us a proper exit code, too.
          ./hets -V

      # Actually we need it for tests, only. So 1h retention would be enough.
      # ~ 206 MiB which saves us ~ 25 min.
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: hets-server
          path: ${{ env.HETS_ARC }}
          retention-days: 1


  ###################### TESTING ######################
  # We prefer the server build because it is more or less a subset of the
  # desktop version. So if server binary works, desktop binary should work
  # as well. This also frees us from installing missing GUI deps.
  job_3a:
    # Runs/compiles/executes? haskell related tests in several subdirs.
    name: Run checks
    runs-on: ubuntu-18.04
    needs: job_2b
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: hets-server
          path: ${{ env.HETS_ARC }}

      - name: Extract artifact
        run: tar -H posix -I zstd -cxf ${{ env.HETS_ARC }}

      - name: Fetch stack cache
        uses: actions/cache@v2
        with:
          path: ${{ env.STACK_ROOT }}
          key: stack-${{ runner.os }}-${{ hashFiles('stack.yaml') }}

      - name: Environment
        run: |
          sudo cp -p ksh93 /bin/ksh93
          ${{ env.GAH }} -c showEnv

      - name: Test
        run: |
          make stack
          make check

  job_3b:
    # Calls hets for several files in Hets-Lib. So the binary is needed, only.
    name: Test Hets-Lib
    runs-on: ubuntu-18.04
    needs: job_2b
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: hets-server
          path: ${{ env.HETS_ARC }}

      - name: Extract artifact
        run: tar -H posix -I zstd -cxf ${{ env.HETS_ARC }}

      - name: Install OWL tools
        run: make install-owl-tools

      - name: Checkout Hets-lib
        run: git clone --depth=1 https://github.com/spechub/Hets-lib.git ${{ env.HETS_LIB }}

      - name: Environment
        run: |
          sudo cp -p ksh93 /bin/ksh93
          ${{ env.GAH }} -c showEnv

      - name: Test
        run: HETS_OWL_TOOLS=${{ env.PREFIX }}/lib/hets/hets-owl-tools ./test/hets-lib-check.sh all

  job_3c:
    # Calls hets for several files in Hets-Lib. So the binary is needed, only.
    name: Test PostgreSQL DB
    runs-on: ubuntu-18.04
    needs: job_2b
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: hets-server
          path: ${{ env.HETS_ARC }}

      - name: Extract artifact
        run: |
          tar -H posix -I zstd -cxf ${{ env.HETS_ARC }}
          sudo cp -p ksh93 /bin/

      - name: Install Hets Server
        run: make install-hets_server

      - name: Checkout Hets-lib
        run: git clone --depth=1 https://github.com/spechub/Hets-lib.git ${{ env.HETS_LIB }}

      - name: Environment
        run: |
          sudo cp -p ksh93 /bin/ksh93
          ${{ env.GAH }} -c showEnv

      - name: Test
        run: |
          sudo systemctl stop postgresql || true
          HETS_MAGIC=${{ github.workspace }}/magic/hets.magic PATH=${PREFIX}/bin:${PATH} ./test/hets-lib-database-check.sh -a 'PostgreSQL'

  job_3d:
    # Same as 3c but for SQlite
    name: Test SQLite DB
    runs-on: ubuntu-18.04
    needs: job_2b
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: hets-server
          path: ${{ env.HETS_ARC }}

      - name: Extract artifact
        run: |
          tar -H posix -I zstd -cxf ${{ env.HETS_ARC }}
          sudo cp -p ksh93 /bin/

      - name: Install Hets Server
        run: make install-hets_server

      - name: Checkout Hets-lib
        run: git clone --depth=1 https://github.com/spechub/Hets-lib.git ${{ env.HETS_LIB }}

      - name: Environment
        run: |
          sudo cp -p ksh93 /bin/ksh93
          ${{ env.GAH }} -c showEnv

      - name: Test
        run: HETS_MAGIC=${{ github.workspace }}/magic/hets.magic PATH=${PREFIX}/bin:${PATH} ./test/hets-lib-database-check.sh -a 'SQLite'
